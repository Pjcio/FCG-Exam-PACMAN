#include <SFML/Graphics.hpp>
#include <unordered_map>
#include <vector>
#include "Score.h"
#include "utils.h"
#include "constants.h"
#include "TileMap.h"

TileMap::TileMap() {
    grid = {
        {2, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 40, 39, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 1},
        {4, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 22, 21, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 3},
        {4, 41, 36, 19, 19, 35, 41, 36, 19, 19, 19, 35, 41, 22, 21, 41, 36, 19, 19, 19, 35, 41, 36, 19, 19, 35, 41, 3},
        {4, 43, 22,  0,  0, 21, 41, 22,  0,  0,  0, 21, 41, 22, 21, 41, 22,  0,  0,  0, 21, 41, 22,  0,  0, 21, 43, 3},
        {4, 41, 38, 20, 20, 37, 41, 38, 20, 20, 20, 37, 41, 38, 37, 41, 38, 20, 20, 20, 37, 41, 38, 20, 20, 37, 41, 3},
        {4, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 3},
        {4, 41, 36, 19, 19, 35, 41, 36, 35, 41, 36, 19, 19, 19, 19, 19, 19, 35, 41, 36, 35, 41, 36, 19, 19, 35, 41, 3},
        {4, 41, 38, 20, 20, 37, 41, 22, 21, 41, 38, 20, 20, 32, 31, 20, 20, 37, 41, 22, 21, 41, 38, 20, 20, 37, 41, 3},
        {4, 41, 41, 41, 41, 41, 41, 22, 21, 41, 41, 41, 41, 22, 21, 41, 41, 41, 41, 22, 21, 41, 41, 41, 41, 41, 41, 3},
        {6, 12, 12, 12, 12, 35, 41, 22, 33, 19, 19, 35,   0, 22, 21,  0, 36, 19, 19, 34, 21, 41, 36, 12, 12, 12, 12, 5},
        {0,  0,  0,  0,  0,  4,  0, 22, 31, 20, 20, 37,  0, 38, 37,  0, 38, 20, 20, 32, 21,  0,  3,  0,  0,  0,  0,  0},
        {0,  0,  0,  0,  0,  4,  0, 22, 21,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 22, 21,  0,  3,  0,  0,  0,  0,  0},
        {0,  0,  0,  0,  0,  4,  0, 22, 21,  0, 26, 12, 30, 44, 44, 29, 12, 25,  0, 22, 21,  0,  3,  0,  0,  0,  0,  0},
        {11, 11, 11, 11, 11, 37,  0, 38, 37,  0,  3,  0,  0,  0,  0,  0,  0,  4,  0, 38, 37,  0, 38, 11, 11, 11, 11, 11},
        {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        {12, 12, 12, 12, 12, 35,  0, 36, 35,  0,  3,  0,  0,  0,  0,  0,  0,  4,  0, 36, 35,  0, 36, 12, 12, 12, 12, 12},
        {0,  0,  0,  0,  0,  4,  0, 22, 21,  0, 28, 11, 11, 11, 11, 11, 11, 27,  0, 22, 21,  0,  3,  0,  0,  0,  0,  0},
        {0,  0,  0,  0,  0,  4,  0, 22, 21,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 22, 21,  0,  3,  0,  0,  0,  0,  0},
        {0,  0,  0,  0,  0,  4,  0, 22, 21,  0, 36, 19, 19, 19, 19, 19, 19, 35,  0, 22, 21,  0,  3,  0,  0,  0,  0,  0},
        {2, 11, 11, 11, 11, 37,  0, 38, 37,  0, 38, 20, 20, 32, 31, 20, 20, 37,  0, 38, 37,  0, 38, 11, 11, 11, 11,  1},
        {4, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 22, 21, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 3},  
        {4, 41, 36, 19, 19, 35, 41, 36, 19, 19, 19, 35, 41, 22, 21, 41, 36, 19, 19, 19, 35, 41, 36, 19, 19, 35, 41, 3},  
        {4, 41, 38, 20, 32, 21, 41, 38, 20, 20, 20, 37, 41, 38, 37, 41, 38, 20, 20, 20, 37, 41, 22, 31, 20, 37, 41, 3},  
        {4, 43, 41, 41, 22, 21, 41, 41, 41, 41, 41, 41, 41, 0, 0, 41, 41, 41, 41, 41, 41, 41, 22, 21, 41, 41, 43, 3},  
        {8, 19, 35, 41, 22, 21, 41, 36, 35, 41, 36, 19, 19, 19, 19, 19, 19, 35, 41, 36, 35, 41, 22, 21, 41, 36, 19, 7},  
        {10, 20, 37, 41, 38, 37, 41, 22, 21, 41, 38, 20, 20, 32, 31, 20, 20, 37, 41, 22, 21, 41, 38, 37, 41, 38, 20, 9},  
        {4, 41, 41, 41, 41, 41, 41, 22, 21, 41, 41, 41, 41, 22, 21, 41, 41, 41, 41, 22, 21, 41, 41, 41, 41, 41, 41, 3},  
        {4, 41, 36, 19, 19, 19, 19, 34, 33, 19, 19, 35, 41, 22, 21, 41, 36, 19, 19, 34, 33, 19, 19, 19, 19, 35, 41, 3},  
        {4, 41, 38, 20, 20, 20, 20, 20, 20, 20, 20, 37, 41, 38, 37, 41, 38, 20, 20, 20, 20, 20, 20, 20, 20, 37, 41, 3},  
        {4, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 3},  
        {6, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 5}  
    };
    textures = loadAssetsMapFromDirectory("resources/tiles");

    for (size_t y = 0; y < grid.size(); ++y) {
        for (size_t x = 0; x < grid[y].size(); ++x) {
            int tileId = grid[y][x];
            if (textures.find(tileId) != textures.end()) {
                sf::Sprite sprite(textures.at(tileId));
                sprite.setPosition(sf::Vector2f(static_cast<float>(x * TILE_SIZE), static_cast<float>(y * TILE_SIZE + SCORE_BOARD_HEIGHT)));
                sprite.setScale(sf::Vector2f(WINDOW_RESIZE, WINDOW_RESIZE)); // Mantiene lo scaling

                sprites.push_back(sprite); // Memorizziamo lo sprite
            }
        }
    }
}

int TileMap::getPelletCount() const {
    return pelletCount;
}

int TileMap::getTileId(int x, int y) {
    if (y < 0 || y >= grid.size() || x < 0 || x >= grid[y].size()) {
        return -1; // Out of bounds
    }
    return grid[y][x];
}

bool TileMap::isTileSolid(int x, int y) {
    if (y < 0 || y >= grid.size() || x < 0 || x >= grid[y].size()) {
        return true; // Out of bounds
    }
    int tileId = grid[y][x];
    return (tileId != 0 && tileId != 41 && tileId != 43); // 0, 41 o 43 are theonly non-solid tiles
}

void TileMap::eatPellet(int x, int y, Score& score) {
    if (y < 0 || y >= grid.size() || x < 0 || x >= grid[y].size()) {
        return; // Out of bounds
    }

    int tileId = grid[y][x];

    if (tileId != 41 && tileId != 43) return; // Not a pellet

    grid[y][x] = 0; // Remove pellet from grid

    // Update the sprite to remove the pellet from the display
    for (auto& sprite : sprites) {
        if (sprite.getPosition() == sf::Vector2f(static_cast<float>(x * TILE_SIZE), static_cast<float>(y * TILE_SIZE + SCORE_BOARD_HEIGHT))) {
            sprite.setTexture(textures[0]); // Set to empty texture
            break;
        }
    }

    if (tileId == 41) {
        score.addPoints(10); // Normal pellet
    } else if (tileId == 43) {
        score.addPoints(50); // Super pellet
        // SUPER PELLET GHOST MECHANICS HERE //
    }
    pelletCount--; // Decrease the pellet count
}

void TileMap::loadNextLevel() {
    pelletCount = 224; // Reset pellet count for the new level
    grid = {
        {2, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 40, 39, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 1},
        {4, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 22, 21, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 3},
        {4, 41, 36, 19, 19, 35, 41, 36, 19, 19, 19, 35, 41, 22, 21, 41, 36, 19, 19, 19, 35, 41, 36, 19, 19, 35, 41, 3},
        {4, 43, 22,  0,  0, 21, 41, 22,  0,  0,  0, 21, 41, 22, 21, 41, 22,  0,  0,  0, 21, 41, 22,  0,  0, 21, 43, 3},
        {4, 41, 38, 20, 20, 37, 41, 38, 20, 20, 20, 37, 41, 38, 37, 41, 38, 20, 20, 20, 37, 41, 38, 20, 20, 37, 41, 3},
        {4, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 3},
        {4, 41, 36, 19, 19, 35, 41, 36, 35, 41, 36, 19, 19, 19, 19, 19, 19, 35, 41, 36, 35, 41, 36, 19, 19, 35, 41, 3},
        {4, 41, 38, 20, 20, 37, 41, 22, 21, 41, 38, 20, 20, 32, 31, 20, 20, 37, 41, 22, 21, 41, 38, 20, 20, 37, 41, 3},
        {4, 41, 41, 41, 41, 41, 41, 22, 21, 41, 41, 41, 41, 22, 21, 41, 41, 41, 41, 22, 21, 41, 41, 41, 41, 41, 41, 3},
        {6, 12, 12, 12, 12, 35, 41, 22, 33, 19, 19, 35,   0, 22, 21,  0, 36, 19, 19, 34, 21, 41, 36, 12, 12, 12, 12, 5},
        {0,  0,  0,  0,  0,  4,  0, 22, 31, 20, 20, 37,  0, 38, 37,  0, 38, 20, 20, 32, 21,  0,  3,  0,  0,  0,  0,  0},
        {0,  0,  0,  0,  0,  4,  0, 22, 21,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 22, 21,  0,  3,  0,  0,  0,  0,  0},
        {0,  0,  0,  0,  0,  4,  0, 22, 21,  0, 26, 12, 30, 44, 44, 29, 12, 25,  0, 22, 21,  0,  3,  0,  0,  0,  0,  0},
        {11, 11, 11, 11, 11, 37,  0, 38, 37,  0,  3,  0,  0,  0,  0,  0,  0,  4,  0, 38, 37,  0, 38, 11, 11, 11, 11, 11},
        {0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0},
        {12, 12, 12, 12, 12, 35,  0, 36, 35,  0,  3,  0,  0,  0,  0,  0,  0,  4,  0, 36, 35,  0, 36, 12, 12, 12, 12, 12},
        {0,  0,  0,  0,  0,  4,  0, 22, 21,  0, 28, 11, 11, 11, 11, 11, 11, 27,  0, 22, 21,  0,  3,  0,  0,  0,  0,  0},
        {0,  0,  0,  0,  0,  4,  0, 22, 21,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 22, 21,  0,  3,  0,  0,  0,  0,  0},
        {0,  0,  0,  0,  0,  4,  0, 22, 21,  0, 36, 19, 19, 19, 19, 19, 19, 35,  0, 22, 21,  0,  3,  0,  0,  0,  0,  0},
        {2, 11, 11, 11, 11, 37,  0, 38, 37,  0, 38, 20, 20, 32, 31, 20, 20, 37,  0, 38, 37,  0, 38, 11, 11, 11, 11,  1},
        {4, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 22, 21, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 3},  
        {4, 41, 36, 19, 19, 35, 41, 36, 19, 19, 19, 35, 41, 22, 21, 41, 36, 19, 19, 19, 35, 41, 36, 19, 19, 35, 41, 3},  
        {4, 41, 38, 20, 32, 21, 41, 38, 20, 20, 20, 37, 41, 38, 37, 41, 38, 20, 20, 20, 37, 41, 22, 31, 20, 37, 41, 3},  
        {4, 43, 41, 41, 22, 21, 41, 41, 41, 41, 41, 41, 41, 0, 0, 41, 41, 41, 41, 41, 41, 41, 22, 21, 41, 41, 43, 3},  
        {8, 19, 35, 41, 22, 21, 41, 36, 35, 41, 36, 19, 19, 19, 19, 19, 19, 35, 41, 36, 35, 41, 22, 21, 41, 36, 19, 7},  
        {10, 20, 37, 41, 38, 37, 41, 22, 21, 41, 38, 20, 20, 32, 31, 20, 20, 37, 41, 22, 21, 41, 38, 37, 41, 38, 20, 9},  
        {4, 41, 41, 41, 41, 41, 41, 22, 21, 41, 41, 41, 41, 22, 21, 41, 41, 41, 41, 22, 21, 41, 41, 41, 41, 41, 41, 3},  
        {4, 41, 36, 19, 19, 19, 19, 34, 33, 19, 19, 35, 41, 22, 21, 41, 36, 19, 19, 34, 33, 19, 19, 19, 19, 35, 41, 3},  
        {4, 41, 38, 20, 20, 20, 20, 20, 20, 20, 20, 37, 41, 38, 37, 41, 38, 20, 20, 20, 20, 20, 20, 20, 20, 37, 41, 3},  
        {4, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 3},  
        {6, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 5}  
    };

    sprites = {}; 

    for (size_t y = 0; y < grid.size(); ++y) {
        for (size_t x = 0; x < grid[y].size(); ++x) {
            int tileId = grid[y][x];
            if (textures.find(tileId) != textures.end()) {
                sf::Sprite sprite(textures.at(tileId));
                sprite.setPosition(sf::Vector2f(static_cast<float>(x * TILE_SIZE), static_cast<float>(y * TILE_SIZE + SCORE_BOARD_HEIGHT)));
                sprite.setScale(sf::Vector2f(WINDOW_RESIZE, WINDOW_RESIZE)); // Mantiene lo scaling

                sprites.push_back(sprite); // Memorizziamo lo sprite
            }
        }
    }
}

void TileMap::draw(sf::RenderWindow& window) const {
    // Disegna tutti gli sprite in un'unica chiamata
    for (const auto& sprite : sprites) {
        window.draw(sprite);
    }
}
